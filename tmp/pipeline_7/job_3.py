import os

# Function to run a job and return the output file
def run_job(job_id, input_file, output_file):
    # Check if the input file exists
    if not os.path.isfile(input_file):
        raise ValueError("Input file does not exist")
    
    # Run the job
    os.system(f"job_{job_id}.py {input_file} {output_file}")

# Function to generate the pipeline
def generate_pipeline(name, description, jobs):
    with open(f"{name}.json", "w") as f:
        json.dump({"name": name, "description": description, "jobs": jobs}, f)

# Generate the pipeline
generate_pipeline("My Pipeline", "This Pipeline has 3 Jobs.", [
    {"id": 1, "dep": 0, "name": "Job 1", "description": "This Job will generate a new resource.", "input_resources": "example1.ext", "output_resources": "example2.ext"},
    {"id": 2, "dep": 1, "name": "Job 2", "description": "This Job will use the resource generated by Job 1.", "input_resources": "example2.ext", "output_resources": "example3.ext"},
    {"id": 3, "dep": 2, "name": "Job 3", "description": "This Job will use the resource generated by Job 2.", "input_resources": "example3.ext", "output_resources": "example4.ext"}
])

# Run the jobs
run_job(1, "example1.ext", "example2.ext")
run_job(2, "example2.ext", "example3.ext")
run_job(3, "example3.ext", "example4.ext")